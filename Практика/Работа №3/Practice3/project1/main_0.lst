

HI-TECH Software 8051 Macro Assembler V9.60                                Page 1
                                                       Fri Mar 14 18:48:22 2025

     1                           	psect	idata,class=DATA,space=1,limit=080h
     2                           	psect	irdata,class=DATA,limit=080h
     3                           	global	_delay
     4                           	signat	_delay,4216
     5                           	global	stack_internal
     6                           	psect	text,class=CODE
     7                           	psect	text
     8                           	file	"C:\Users\Pavel\DOCUME~1\NATION~1\CIRCUI~1
                                 .0\MCUWOR~1\PRACTI~1\project1\main.c"
     9                           	line	2
    10  00112                     _delay:
    11  00112  80 51              	j	f1411
    12  00114                     f1410:
    13                           ;main.c: 2: void delay(unsigned int time) {
    14                           
    15                           ;	var   _i assigned to ?a_delay+0
    16                           ;	var   _j assigned to ?a_delay+2
    17                           ;main.c: 3: unsigned int i, j;
    18                           
    19                           ;main.c: 4: for (i = 0; i < time; i++)
    20                           
    21                           	line	4
    22  00114  E4                 	clr	a
    23  00115  F5 39              	mov	?a_delay+0,a
    24  00117  F5 3A              	mov	?a_delay+0+1,a
    25                           ;	var   _time assigned to ?a_delay+4
    26                           ;_time stored from WR2
    27                           	line	3
    28  00119  8C 3D              	mov	?a_delay+4,r4
    29  0011B  8D 3E              	mov	?a_delay+4+1,r5
    30                           	line	4
    31  0011D  80 33              	jmp	l6
    32                           	line	5
    33  0011F                     l3:
    34                           ;main.c: 5: for (j = 0; j < 5; j++);
    35                           
    36  0011F  E4                 	clr	a
    37  00120  F5 3B              	mov	?a_delay+2,a
    38  00122  F5 3C              	mov	?a_delay+2+1,a
    39  00124  E5 3C              	mov	a,?a_delay+2+1
    40  00126  24 FB              	add	a,#low -(5)
    41  00128  E5 3B              	mov	a,?a_delay+2
    42  0012A  34 FF              	addc	a,#high -(5)
    43  0012C  50 02              	bnc	u11
    44  0012E  80 02              	jmp	u10
    45  00130                     u11:
    46  00130  80 02              	jmp	l7
    47  00132                     u10:
    48  00132  80 16              	jmp	l8
    49  00134                     l7:
    50  00134  05 3C              	inc	?a_delay+2+1
    51  00136  E5 3C              	mov	a,?a_delay+2+1
    52  00138  70 02              	jnz	u20
    53  0013A  05 3B              	inc	?a_delay+2
    54  0013C                     u20:
    55  0013C  E5 3C              	mov	a,?a_delay+2+1
    56  0013E  24 FB              	add	a,#low -(5)
    57  00140  E5 3B              	mov	a,?a_delay+2
    58  00142  34 FF              	addc	a,#high -(5)
    59  00144  50 02              	bnc	u31
    60  00146  80 02              	jmp	u30
    61  00148                     u31:
    62  00148  80 EA              	jmp	l7
    63  0014A                     u30:
    64  0014A                     l8:
    65                           	line	4
    66  0014A  05 3A              	inc	?a_delay+0+1
    67  0014C  E5 3A              	mov	a,?a_delay+0+1
    68  0014E  70 02              	jnz	u40
    69  00150  05 39              	inc	?a_delay+0
    70  00152                     u40:
    71  00152                     l6:
    72  00152  E5 3D              	mov	a,?a_delay+4
    73  00154  B5 39  07          	cbne	a,?a_delay+0,u52
    74  00157  E5 3E              	mov	a,?a_delay+4+1
    75  00159  B5 3A  02          	cbne	a,?a_delay+0+1,u52
    76  0015C  80 06              	jmp	u50
    77  0015E                     u52:
    78  0015E  50 02              	bnc	u51
    79  00160  80 02              	jmp	u50
    80  00162                     u51:
    81  00162  80 BB              	jmp	l3
    82  00164                     u50:
    83  00164                     l4:
    84                           ;main.c: 6: }
    85                           
    86                           	line	6
    87  00164                     l2:
    88  00164  22                 	ret
    89  00165                     f1411:
    90  00165  80 AD              	j	f1410
    91                           	FNSIZE	_delay,6,0
    92                           	global	?a_delay
    93  0000                     f1412	equ	0
    94                           ;	param _cmd assigned to r5 on entry
    95                           	global	_send_cmd
    96                           	signat	_send_cmd,4216
    97                           	line	8
    98  00167                     _send_cmd:
    99  00167  80 15              	j	f1421
   100  00169                     f1420:
   101                           ;main.c: 8: void send_cmd(unsigned char cmd) {
   102                           
   103                           ;main.c: 9: P0 = cmd;
   104                           
   105                           	line	9
   106  00169  8D 80              	mov	080h,r5
   107                           ;main.c: 10: P2 = 0x00;
   108                           
   109                           	line	10
   110  0016B  75 A0 00           	mov	0A0h,#0
   111                           ;main.c: 11: P2 = 0x01;
   112                           
   113                           	line	11
   114  0016E  75 A0 01           	mov	0A0h,#1
   115                           ;main.c: 12: delay(1);
   116                           
   117                           	FNCALL	_send_cmd,_delay
   118                           ;	var   _cmd assigned to ?a_send_cmd+0
   119                           ;_cmd stored from r5
   120                           	line	12
   121  00171  8D 37              	mov	?a_send_cmd+0,r5
   122  00173  7C 00              	mov	r4,#high (1)
   123  00175  7D 01              	mov	r5,#low (1)
   124  00177  12 0112            	lcall	_delay
   125                           
   126                           ;main.c: 13: P2 = 0x00;
   127                           
   128                           	line	13
   129  0017A  75 A0 00           	mov	0A0h,#0
   130                           ;main.c: 14: }
   131                           
   132                           	line	14
   133  0017D                     l10:
   134  0017D  22                 	ret
   135  0017E                     f1421:
   136  0017E  80 E9              	j	f1420
   137                           	FNSIZE	_send_cmd,1,0
   138                           	global	?a_send_cmd
   139  0000                     f1422	equ	0
   140                           ;	param _dat assigned to r4/r5 on entry
   141                           	global	_send_data
   142                           	signat	_send_data,4216
   143                           	line	16
   144  00180                     _send_data:
   145  00180  80 18              	j	f1431
   146  00182                     f1430:
   147                           ;main.c: 16: void send_data(unsigned char *dat) 
                                 {
   148                           
   149                           ;main.c: 17: P0 = dat;
   150                           
   151                           	line	17
   152  00182  85 05 80           	mov	080h,1+4+0
   153                           ;main.c: 18: P2 = 0x02;
   154                           
   155                           	line	18
   156  00185  75 A0 02           	mov	0A0h,#2
   157                           ;main.c: 19: P2 = 0x03;
   158                           
   159                           	line	19
   160  00188  75 A0 03           	mov	0A0h,#3
   161                           ;main.c: 20: delay(1);
   162                           
   163                           	FNCALL	_send_data,_delay
   164                           ;	var   _dat assigned to ?a_send_data+0
   165                           ;_dat stored from WR2
   166                           	line	20
   167  0018B  8C 37              	mov	?a_send_data+0,r4
   168  0018D  8D 38              	mov	?a_send_data+0+1,r5
   169  0018F  7C 00              	mov	r4,#high (1)
   170  00191  7D 01              	mov	r5,#low (1)
   171  00193  12 0112            	lcall	_delay
   172                           
   173                           ;main.c: 21: P2 = 0x02;
   174                           
   175                           	line	21
   176  00196  75 A0 02           	mov	0A0h,#2
   177                           ;main.c: 22: }
   178                           
   179                           	line	22
   180  00199                     l11:
   181  00199  22                 	ret
   182  0019A                     f1431:
   183  0019A  80 E6              	j	f1430
   184                           	FNSIZE	_send_data,2,0
   185                           	global	?a_send_data
   186  0000                     f1432	equ	0
   187                           ;	param _text assigned to r4/r5 on entry
   188                           	global	_vyvod
   189                           	signat	_vyvod,4216
   190                           	line	23
   191  0019C                     _vyvod:
   192  0019C  80 54              	j	f1441
   193  0019E                     f1440:
   194                           ;main.c: 23: void vyvod(unsigned char *text){
   195                           
   196                           ;	var   _i assigned to ?a_vyvod+0
   197                           ;	var   _j assigned to ?a_vyvod+1
   198                           ;	var   _len assigned to ?a_vyvod+2
   199                           ;main.c: 24: unsigned char i, j, len = 0;
   200                           
   201                           	line	24
   202  0019E  75 32  00          	mov	?a_vyvod+2,#0
   203                           ;	var   _probel assigned to ?a_vyvod+3
   204                           ;main.c: 25: unsigned char *probel=" ";
   205                           
   206                           	line	25
   207  001A1  75 33  01          	mov	?a_vyvod+3,#high(0+u19)
   208  001A4  75 34  10          	mov	?a_vyvod+3+1,#low(0+u19)
   209                           ;main.c: 26: send_cmd(0xC0);
   210                           
   211                           	FNCALL	_vyvod,_send_cmd
   212                           ;	var   _text assigned to ?a_vyvod+5
   213                           ;_text stored from WR2
   214  001A7  8C 35              	mov	?a_vyvod+5,r4
   215  001A9  8D 36              	mov	?a_vyvod+5+1,r5
   216                           	line	26
   217  001AB  7D C0              	mov	r5,#192
   218  001AD  12 0167            	lcall	_send_cmd
   219                           
   220                           ;main.c: 27: while (text[len] != '\0') len++;
   221                           
   222                           	line	27
   223  001B0  80 02              	jmp	l13
   224  001B2                     l14:
   225  001B2  05 32              	inc	?a_vyvod+2
   226  001B4                     l13:
   227  001B4  E5 32              	mov	a,?a_vyvod+2
   228  001B6  25 36              	add	a,?a_vyvod+5+1
   229  001B8  F5 82              	mov	dpl,a
   230  001BA  E4                 	clr	a
   231  001BB  35 35              	addc	a,?a_vyvod+5
   232  001BD  F5 83              	mov	dph,a
   233                           	global	ldc_byte
   234  001BF  12 030F            	call	ldc_byte
   235  001C2  70 EE              	bnz	l14
   236  001C4                     l15:
   237                           ;main.c: 28: for (i = 0; i < len; i++) {
   238                           
   239                           	line	28
   240  001C4  75 30  00          	mov	?a_vyvod+0,#0
   241  001C7  80 1D              	jmp	l19
   242  001C9                     l16:
   243                           ;main.c: 29: send_data(text[i]);
   244                           
   245                           	FNCALL	_vyvod,_send_data
   246                           	line	29
   247  001C9  E5 30              	mov	a,?a_vyvod+0
   248  001CB  25 36              	add	a,?a_vyvod+5+1
   249  001CD  F5 82              	mov	dpl,a
   250  001CF  E4                 	clr	a
   251  001D0  35 35              	addc	a,?a_vyvod+5
   252  001D2  F5 83              	mov	dph,a
   253                           	global	ldc_byte
   254  001D4  12 030F            	call	ldc_byte
   255  001D7  FD                 	mov	r5,a
   256  001D8  7C 00              	mov	r4,#0
   257  001DA  12 0180            	lcall	_send_data
   258                           
   259                           ;main.c: 30: send_data(probel);
   260                           
   261                           	line	30
   262  001DD  AC 33              	mov	r4,?a_vyvod+3
   263  001DF  AD 34              	mov	r5,?a_vyvod+3+1
   264  001E1  12 0180            	lcall	_send_data
   265                           
   266                           	line	28
   267  001E4  05 30              	inc	?a_vyvod+0
   268  001E6                     l19:
   269  001E6  E5 30              	mov	a,?a_vyvod+0
   270  001E8  C3                 	clr	c
   271  001E9  95 32              	subb	a,?a_vyvod+2
   272  001EB  40 02              	bc	u61
   273  001ED  80 02              	jmp	u60
   274  001EF                     u61:
   275  001EF  80 D8              	jmp	l16
   276  001F1                     u60:
   277  001F1                     l17:
   278                           ;main.c: 31: }
   279                           
   280                           ;main.c: 32: }
   281                           
   282                           	line	32
   283  001F1                     l12:
   284  001F1  22                 	ret
   285  001F2                     f1441:
   286  001F2  80 AA              	j	f1440
   287                           	FNSIZE	_vyvod,7,0
   288                           	global	?a_vyvod
   289  0000                     f1442	equ	0
   290                           ;	param _text assigned to r4/r5 on entry
   291                           	global	_scroll_text
   292                           	signat	_scroll_text,4216
   293                           	line	33
   294  001F4                     _scroll_text:
   295  001F4  02 02D9            	j	f1451
   296  001F7                     f1450:
   297                           ;main.c: 33: void scroll_text(unsigned char *tex
                                 t) {
   298                           
   299                           ;	var   _i assigned to ?a_scroll_text+0
   300                           ;	var   _j assigned to ?a_scroll_text+1
   301                           ;	var   _len assigned to ?a_scroll_text+2
   302                           ;main.c: 34: unsigned char i, j, len = 0, cursor
                                 _pos = 0;
   303                           
   304                           	line	34
   305  001F7  75 32  00          	mov	?a_scroll_text+2,#0
   306                           ;	var   _cursor_pos assigned to ?a_scroll_text+3
   307  001FA  75 33  00          	mov	?a_scroll_text+3,#0
   308                           ;main.c: 35: while (text[len] != '\0') len++;
   309                           
   310                           ;	var   _text assigned to ?a_scroll_text+4
   311                           ;_text stored from WR2
   312  001FD  8C 34              	mov	?a_scroll_text+4,r4
   313  001FF  8D 35              	mov	?a_scroll_text+4+1,r5
   314                           	line	35
   315  00201  80 02              	jmp	l21
   316  00203                     l22:
   317  00203  05 32              	inc	?a_scroll_text+2
   318  00205                     l21:
   319  00205  E5 32              	mov	a,?a_scroll_text+2
   320  00207  25 35              	add	a,?a_scroll_text+4+1
   321  00209  F5 82              	mov	dpl,a
   322  0020B  E4                 	clr	a
   323  0020C  35 34              	addc	a,?a_scroll_text+4
   324  0020E  F5 83              	mov	dph,a
   325                           	global	ldc_byte
   326  00210  12 030F            	call	ldc_byte
   327  00213  70 EE              	bnz	l22
   328  00215                     l23:
   329                           ;main.c: 36: while (1) {
   330                           
   331                           	line	36
   332  00215                     l25:
   333                           ;main.c: 37: for (i = 0; i < len + 20; i++) {
   334                           
   335                           	line	37
   336  00215  75 30  00          	mov	?a_scroll_text+0,#0
   337  00218  02 02B5            	jmp	l30
   338  0021B                     l27:
   339                           ;main.c: 38: send_cmd(0x80);
   340                           
   341                           	FNCALL	_scroll_text,_send_cmd
   342                           	line	38
   343  0021B  7D 80              	mov	r5,#128
   344  0021D  12 0167            	lcall	_send_cmd
   345                           
   346                           ;main.c: 39: cursor_pos = 255;
   347                           
   348                           	line	39
   349  00220  75 33  FF          	mov	?a_scroll_text+3,#255
   350                           ;main.c: 40: for (j = 0; j < 20; j++) {
   351                           
   352                           	line	40
   353  00223  75 31  00          	mov	?a_scroll_text+1,#0
   354  00226  E5 31              	mov	a,?a_scroll_text+1
   355  00228  24 EC              	add	a,#-014h
   356  0022A  50 02              	bnc	u71
   357  0022C  80 02              	jmp	u70
   358  0022E                     u71:
   359  0022E  80 02              	jmp	l31
   360  00230                     u70:
   361  00230  80 68              	jmp	l32
   362  00232                     l31:
   363                           ;main.c: 41: if (i + j < 20)
   364                           
   365                           	line	41
   366  00232  A9 30              	mov	r1,?a_scroll_text+0
   367  00234  78 00              	mov	r0,#0
   368  00236  E9                 	mov	a,r1
   369  00237  25 31              	add	a,?a_scroll_text+1
   370  00239  FD                 	mov	r5,a
   371  0023A  E8                 	mov	a,r0
   372  0023B  34 00              	addc	a,#0
   373  0023D  FC                 	mov	r4,a
   374  0023E  ED                 	mov	a,r5
   375  0023F  24 EC              	add	a,#low -(20)
   376  00241  EC                 	mov	a,r4
   377  00242  64 80              	xrl	a,#80h
   378  00244  34 7F              	addc	a,#(high -(20))xor 80h
   379  00246  40 02              	bc	u81
   380  00248  80 02              	jmp	u80
   381  0024A                     u81:
   382  0024A  80 09              	jmp	l34
   383  0024C                     u80:
   384                           ;main.c: 42: send_data(' ');
   385                           
   386                           	FNCALL	_scroll_text,_send_data
   387                           	line	42
   388  0024C  7C 00              	mov	r4,#high (32)
   389  0024E  7D 20              	mov	r5,#low (32)
   390+ 00250  12 0180            	lcall	_send_data
   391+                          
   392+ 00253  80 39              	jmp	l35
   393                           	line	43
   394  00255                     l34:
   395                           ;main.c: 43: else {
   396                           
   397                           ;	var   _ch assigned to ?a_scroll_text+6
   398                           ;main.c: 44: unsigned char ch = text[(i + j - 20
                                 ) % len];
   399                           
   400                           	line	44
   401  00255  AD 32              	mov	r5,?a_scroll_text+2
   402  00257  7C 00              	mov	r4,#0
   403  00259  A9 30              	mov	r1,?a_scroll_text+0
   404  0025B  78 00              	mov	r0,#0
   405  0025D  E9                 	mov	a,r1
   406  0025E  25 31              	add	a,?a_scroll_text+1
   407  00260  F9                 	mov	r1,a
   408  00261  E8                 	mov	a,r0
   409  00262  34 00              	addc	a,#0
   410  00264  F8                 	mov	r0,a
   411  00265  E9                 	mov	a,r1
   412  00266  24 EC              	add	a,#0ECh
   413  00268  FB                 	mov	r3,a
   414  00269  E8                 	mov	a,r0
   415  0026A  34 FF              	addc	a,#0FFh
   416  0026C  FA                 	mov	r2,a
   417                           	global	awmod
   418  0026D  12 008B            	lcall	awmod
   419  00270  EB                 	mov	a,r3
   420  00271  25 35              	add	a,?a_scroll_text+4+1
   421  00273  F5 82              	mov	dpl,a
   422  00275  EA                 	mov	a,r2
   423  00276  35 34              	addc	a,?a_scroll_text+4
   424  00278  F5 83              	mov	dph,a
   425                           	global	ldc_byte
   426  0027A  12 030F            	call	ldc_byte
   427  0027D  F5 36              	mov	?a_scroll_text+6,a
   428                           ;main.c: 45: send_data(ch);
   429                           
   430                           	line	45
   431  0027F  AD 36              	mov	r5,?a_scroll_text+6
   432  00281  7C 00              	mov	r4,#0
   433  00283  12 0180            	lcall	_send_data
   434                           
   435                           ;main.c: 46: if (cursor_pos == 255)
   436                           
   437                           	line	46
   438  00286  E5 33              	mov	a,?a_scroll_text+3
   439  00288  B4 FF 03           	cbne	a,#(255),l36
   440                           ;main.c: 47: cursor_pos = j;
   441                           
   442                           	line	47
   443  0028B  85 31  33          	mov	?a_scroll_text+3,?a_scroll_text+1
   444  0028E                     l36:
   445                           	line	48
   446  0028E                     l35:
   447                           	line	40
   448  0028E  05 31              	inc	?a_scroll_text+1
   449  00290  E5 31              	mov	a,?a_scroll_text+1
   450  00292  24 EC              	add	a,#-014h
   451  00294  50 02              	bnc	u91
   452  00296  80 02              	jmp	u90
   453  00298                     u91:
   454  00298  80 98              	jmp	l31
   455  0029A                     u90:
   456  0029A                     l32:
   457                           ;main.c: 48: }
   458                           
   459                           ;main.c: 49: }
   460                           
   461                           ;main.c: 50: if (cursor_pos != 255)
   462                           
   463                           	line	50
   464  0029A  E5 33              	mov	a,?a_scroll_text+3
   465  0029C  24 01              	add	a,#-(255)
   466  0029E  60 02              	bz	u101
   467  002A0  80 02              	jmp	u100
   468  002A2                     u101:
   469  002A2  80 08              	jmp	l37
   470  002A4                     u100:
   471                           ;main.c: 51: send_cmd(0xC0 + cursor_pos);
   472                           
   473                           	line	51
   474  002A4  E5 33              	mov	a,?a_scroll_text+3
   475  002A6  24 C0              	add	a,#-64
   476  002A8  FD                 	mov	r5,a
   477  002A9  12 0167            	lcall	_send_cmd
   478                           
   479  002AC                     l37:
   480                           ;main.c: 52: delay(300);
   481                           
   482                           	FNCALL	_scroll_text,_delay
   483                           	line	52
   484  002AC  7C 01              	mov	r4,#high (300)
   485  002AE  7D 2C              	mov	r5,#low (300)
   486  002B0  12 0112            	lcall	_delay
   487                           
   488                           	line	37
   489  002B3  05 30              	inc	?a_scroll_text+0
   490  002B5                     l30:
   491  002B5  E5 32              	mov	a,?a_scroll_text+2
   492  002B7  24 14              	add	a,#014h
   493  002B9  FD                 	mov	r5,a
   494  002BA  E4                 	clr	a
   495  002BB  33                 	rlc	a
   496  002BC  FC                 	mov	r4,a
   497  002BD  A9 30              	mov	r1,?a_scroll_text+0
   498  002BF  78 00              	mov	r0,#0
   499  002C1  C3                 	clr	c
   500  002C2  E9                 	mov	a,r1
   501  002C3  9D                 	subb	a,r5
   502  002C4  8C F0              	mov	b,r4
   503  002C6  63 F0 80           	xrl	b,#80h
   504  002C9  E8                 	mov	a,r0
   505  002CA  64 80              	xrl	a,#80h
   506  002CC  95 F0              	subb	a,b
   507  002CE  40 02              	bc	u111
   508  002D0  80 03              	jmp	u110
   509  002D2                     u111:
   510  002D2  02 021B            	jmp	l27
   511  002D5                     u110:
   512  002D5                     l28:
   513                           	line	54
   514  002D5                     l24:
   515                           	line	36
   516  002D5  02 0215            	jmp	l25
   517  002D8                     l26:
   518                           ;main.c: 53: }
   519                           
   520                           ;main.c: 54: }
   521                           
   522                           ;main.c: 55: }
   523                           
   524                           	line	55
   525  002D8                     l20:
   526  002D8  22                 	ret
   527  002D9                     f1451:
   528  002D9  02 01F7            	j	f1450
   529                           	FNSIZE	_scroll_text,7,0
   530                           	global	?a_scroll_text
   531  0000                     f1452	equ	0
   532                           	global	_main
   533                           	signat	_main,88
   534                           	line	59
   535  002DC                     _main:
   536  002DC  80 2F              	j	f1461
   537  002DE                     f1460:
   538                           ;main.c: 58: void main()
   539                           
   540                           ;main.c: 59: {
   541                           
   542                           	psect	data,class=CODE
   543                           	psect	data
   544  00100                     F177:
   545  00100  AC                 	db	(172)
   546  00101  A9                 	db	(169)
   547  00102  B2                 	db	(178)
   548  00103  C0                 	db	(192)
   549  00104  AE                 	db	(174)
   550  00105  B2                 	db	(178)
   551  00106  AB                 	db	(171)
   552  00107  A9                 	db	(169)
   553  00108  AA                 	db	(170)
   554  00109  00                 	db	(0)
   555                           ;	var   _first assigned to ?a_main+0
   556                           ;main.c: 60: unsigned char first[] = {0xAC, 0xA9
                                 , 0xB2, 0xC0, 0xAE, 0xB2, 0xAB, 0xA9,0xAA, 0x00}
                                 ;
   557                           
   558                           	psect	text
   559                           	line	60
   560  002DE  78 01              	mov	r0,#high (F177)
   561  002E0  79 00              	mov	r1,#low (F177)
   562  002E2  7A 00              	mov	r2,#high (?a_main+0)
   563  002E4  7B 20              	mov	r3,#low (?a_main+0)
   564  002E6  7D 0A              	mov	r5,#low 10
   565  002E8  7C 00              	mov	r4,#high 10
   566                           	global	str_copy
   567  002EA  12 0398            	lcall	str_copy
   568                           	psect	data
   569  0010A                     F181:
   570  0010A  B0                 	db	(176)
   571  0010B  A0                 	db	(160)
   572  0010C  A2                 	db	(162)
   573  0010D  A5                 	db	(165)
   574  0010E  AC                 	db	(172)
   575  0010F  00                 	db	(0)
   576                           ;	var   _second assigned to ?a_main+10
   577                           ;main.c: 61: unsigned char second[] = {0xB0, 0xA
                                 0, 0xA2, 0xA5, 0xAC, 0x00};
   578                           
   579                           	psect	text
   580                           	line	61
   581  002ED  78 01              	mov	r0,#high (F181)
   582  002EF  79 0A              	mov	r1,#low (F181)
   583  002F1  7A 00              	mov	r2,#high (?a_main+10)
   584  002F3  7B 2A              	mov	r3,#low (?a_main+10)
   585  002F5  7D 06              	mov	r5,#low 6
   586  002F7  7C 00              	mov	r4,#high 6
   587                           	global	str_copy
   588  002F9  12 0398            	lcall	str_copy
   589                           ;main.c: 62: vyvod(second);
   590                           
   591                           	FNCALL	_main,_vyvod
   592                           	line	62
   593  002FC  7C 00              	mov	r4,#high (?a_main+10)
   594  002FE  7D 2A              	mov	r5,#low (?a_main+10)
   595  00300  12 019C            	lcall	_vyvod
   596                           
   597                           ;main.c: 63: scroll_text(first);
   598                           
   599                           	FNCALL	_main,_scroll_text
   600                           	line	63
   601  00303  7C 00              	mov	r4,#high (?a_main+0)
   602  00305  7D 20              	mov	r5,#low (?a_main+0)
   603  00307  12 01F4            	lcall	_scroll_text
   604                           
   605                           ;main.c: 64: while(1);
   606                           
   607                           	line	64
   608  0030A                     l42:
   609  0030A                     l41:
   610  0030A  80 FE              	jmp	l42
   611  0030C                     l43:
   612                           ;main.c: 65: }
   613                           
   614                           	line	65
   615  0030C                     l40:
   616  0030C  22                 	ret
   617  0030D                     f1461:
   618  0030D  80 CF              	j	f1460
   619                           	FNSIZE	_main,16,0
   620                           	global	?a_main
   621  0000                     f1462	equ	0
   622                           	psect	strings,class=CODE
   623                           	psect	strings
   624  00110                     u19:
   625  00110  20 00              	db	32,0
   626  0000                     _A10	equ	162
   627  0000                     _A11	equ	163
   628  0000                     _A12	equ	164
   629  0000                     _A13	equ	165
   630  0000                     _A14	equ	166
   631  0000                     _A15	equ	167
   632  0000                     _A8	equ	160
   633  0000                     _A9	equ	161
   634  0000                     _AC	equ	214
   635  0000                     _ACC0	equ	224
   636  0000                     _ACC1	equ	225
   637  0000                     _ACC2	equ	226
   638  0000                     _ACC3	equ	227
   639  0000                     _ACC4	equ	228
   640  0000                     _ACC5	equ	229
   641  0000                     _ACC6	equ	230
   642  0000                     _ACC7	equ	231
   643  0000                     _AD0	equ	128
   644  0000                     _AD1	equ	129
   645  0000                     _AD2	equ	130
   646  0000                     _AD3	equ	131
   647  0000                     _AD4	equ	132
   648  0000                     _AD5	equ	133
   649  0000                     _AD6	equ	134
   650  0000                     _AD7	equ	135
   651  0000                     _B0	equ	240
   652  0000                     _B1	equ	241
   653  0000                     _B2	equ	242
   654  0000                     _B3	equ	243
   655  0000                     _B4	equ	244
   656  0000                     _B5	equ	245
   657  0000                     _B6	equ	246
   658  0000                     _B7	equ	247
   659  0000                     _CY	equ	215
   660  0000                     _EA	equ	175
   661  0000                     _ES	equ	172
   662  0000                     _ET0	equ	169
   663  0000                     _ET1	equ	171
   664  0000                     _EX0	equ	168
   665  0000                     _EX1	equ	170
   666  0000                     _F0	equ	213
   667  0000                     _IE0	equ	137
   668  0000                     _IE1	equ	139
   669  0000                     _INT0	equ	178
   670  0000                     _INT1	equ	179
   671  0000                     _IT0	equ	136
   672  0000                     _IT1	equ	138
   673  0000                     _OV	equ	210
   674  0000                     _P	equ	208
   675  0000                     _P00	equ	128
   676  0000                     _P01	equ	129
   677  0000                     _P02	equ	130
   678  0000                     _P03	equ	131
   679  0000                     _P04	equ	132
   680  0000                     _P05	equ	133
   681  0000                     _P06	equ	134
   682  0000                     _P07	equ	135
   683  0000                     _P10	equ	144
   684  0000                     _P11	equ	145
   685  0000                     _P12	equ	146
   686  0000                     _P13	equ	147
   687  0000                     _P14	equ	148
   688  0000                     _P15	equ	149
   689  0000                     _P16	equ	150
   690  0000                     _P17	equ	151
   691  0000                     _P20	equ	160
   692  0000                     _P21	equ	161
   693  0000                     _P22	equ	162
   694  0000                     _P23	equ	163
   695  0000                     _P24	equ	164
   696  0000                     _P25	equ	165
   697  0000                     _P26	equ	166
   698  0000                     _P27	equ	167
   699  0000                     _P30	equ	176
   700  0000                     _P31	equ	177
   701  0000                     _P32	equ	178
   702  0000                     _P33	equ	179
   703  0000                     _P34	equ	180
   704  0000                     _P35	equ	181
   705  0000                     _P36	equ	182
   706  0000                     _P37	equ	183
   707  0000                     _PS	equ	188
   708  0000                     _PT0	equ	185
   709  0000                     _PT1	equ	187
   710  0000                     _PX0	equ	184
   711  0000                     _PX1	equ	186
   712  0000                     _RB8	equ	154
   713  0000                     _RD	equ	183
   714  0000                     _REN	equ	156
   715  0000                     _RI	equ	152
   716  0000                     _RS0	equ	211
   717  0000                     _RS1	equ	212
   718  0000                     _RXD	equ	176
   719  0000                     _SM0	equ	159
   720  0000                     _SM1	equ	158
   721  0000                     _SM2	equ	157
   722  0000                     _T0	equ	180
   723  0000                     _T1	equ	181
   724  0000                     _TB8	equ	155
   725  0000                     _TF0	equ	141
   726  0000                     _TF1	equ	143
   727  0000                     _TI	equ	153
   728  0000                     _TR0	equ	140
   729  0000                     _TR1	equ	142
   730  0000                     _TXD	equ	177
   731  0000                     _WR	equ	182
   732  0000                     _ACC	equ	224
   733  0000                     _B	equ	240
   734  0000                     _DPH	equ	131
   735  0000                     _DPL	equ	130
   736  0000                     _IE	equ	168
   737  0000                     _IP	equ	184
   738  0000                     _P0	equ	128
   739  0000                     _P1	equ	144
   740  0000                     _P2	equ	160
   741  0000                     _P3	equ	176
   742  0000                     _PCON	equ	135
   743  0000                     _PSW	equ	208
   744  0000                     _SBUF	equ	153
   745  0000                     _SCON	equ	152
   746  0000                     _SP	equ	129
   747  0000                     _TCON	equ	136
   748  0000                     _TH0	equ	140
   749  0000                     _TH1	equ	141
   750  0000                     _TL0	equ	138
   751  0000                     _TL1	equ	139
   752  0000                     _TMOD	equ	137
   753  0000                     _ACC_BITS	equ	224
   754  0000                     _B_BITS	equ	240
   755  0000                     _IE_BITS	equ	168
   756  0000                     _IP_BITS	equ	184
   757  0000                     _P0_BITS	equ	128
   758  0000                     _P1_BITS	equ	144
   759  0000                     _P2_BITS	equ	160
   760  0000                     _P3_BITS	equ	176
   761  0000                     _PCON_BITS	equ	135
   762  0000                     _PSW_BITS	equ	208
   763  0000                     _SCON_BITS	equ	152
   764  0000                     _TCON_BITS	equ	136
   765  0000                     _TMOD_BITS	equ	137


HI-TECH Software 8051 Macro Assembler V9.60                                Page 2
Symbol Table                                           Fri Mar 14 18:48:22 2025

       ?a_main 00020              _B 000F0              l2 00164  
            l3 0011F              l4 00164              _P 000D0  
            l6 00152              l7 00134              l8 0014A  
      ?a_delay 00039             _B0 000F0             _B1 000F1  
           _B2 000F2             _B3 000F3             _B4 000F4  
           _B5 000F5             _B6 000F6             _A8 000A0  
           _B7 000F7             _A9 000A1             _F0 000D5  
           _AC 000D6             l10 0017D             l11 00199  
           l20 002D8             l12 001F1             l21 00205  
           l13 001B4             l30 002B5             l22 00203  
           l14 001B2             _EA 000AF             l31 00232  
           l23 00215             l15 001C4             l40 0030C  
           l24 002D5             l32 0029A             l16 001C9  
           l41 0030A             l25 00215             l17 001F1  
           l42 0030A             l26 002D8             l34 00255  
           l43 0030C             l35 0028E             l27 0021B  
           l19 001E6             _P0 00080             l28 002D5  
           l36 0028E             _P1 00090             l37 002AC  
           _P2 000A0             _P3 000B0             _IE 000A8  
           _T0 000B4             _T1 000B5             _ES 000AC  
           _CY 000D7             _IP 000B8             _RD 000B7  
           u10 00132             u11 00130             u20 0013C  
           _RI 00098             u30 0014A             u31 00148  
           u40 00152             _TI 00099             u50 00164  
           _PS 000BC             u19 00110             u51 00162  
           _OV 000D2             u60 001F1             u52 0015E  
           u61 001EF             _SP 00081             u70 00230  
           u71 0022E             u80 0024C             u81 0024A  
           u90 0029A             u91 00298             _WR 000B6  
       _B_BITS 000F0            F181 0010A            F177 00100  
      ?a_vyvod 00030            _A10 000A2            _A11 000A3  
          _A12 000A4            _A13 000A5            _A14 000A6  
          _A15 000A7            _AD0 00080            _AD1 00081  
          _AD2 00082            _AD3 00083            _AD4 00084  
          _AD5 00085            _AD6 00086            _AD7 00087  
          _ACC 000E0            _P00 00080            _P01 00081  
          _P10 00090            _P02 00082            _P11 00091  
          _P03 00083            _P20 000A0            _P12 00092  
          _P04 00084            _P21 000A1            _P13 00093  
          _P05 00085            _P30 000B0            _P22 000A2  
          _P14 00094            _P06 00086            _P31 000B1  
          _P23 000A3            _P15 00095            _P07 00087  
          _P32 000B2            _P24 000A4            _P16 00096  
          _P33 000B3            _P25 000A5            _P17 00097  
          _P34 000B4            _P26 000A6            _P35 000B5  
          _P27 000A7            _P36 000B6            _P37 000B7  
          _IE0 00089            _IE1 0008B            _ET0 000A9  
          _ET1 000AB            _EX0 000A8            _EX1 000AA  
          _DPH 00083            _DPL 00082            _IT0 00088  
          _IT1 0008A            _RB8 0009A            u100 002A4  
          u101 002A2            u110 002D5            u111 002D2  
          _TF0 0008D            _TB8 0009B            _TF1 0008F  
          _TH0 0008C            _TH1 0008D            _SM0 0009F  
          _SM1 0009E            _TL0 0008A            _SM2 0009D  
          _PT0 000B9            _TL1 0008B            _PT1 000BB  
          _RS0 000D3            _RS1 000D4            _REN 0009C  
          _PX0 000B8            _PX1 000BA            _TR0 0008C  
          _TR1 0008E            _RXD 000B0            _PSW 000D0  
          _TXD 000B1        _P0_BITS 00080        _P1_BITS 00090  
      _P2_BITS 000A0        _P3_BITS 000B0        _IE_BITS 000A8  
     _ACC_BITS 000E0        _IP_BITS 000B8       _send_cmd 00167  
         f1410 00114           f1411 00165           f1420 00169  
         f1412 00000           f1421 0017E           f1430 00182  
         f1422 00000           f1431 0019A           f1440 0019E  
         f1432 00000           f1441 001F2           f1450 001F7  
         f1442 00000           f1451 002D9           f1460 002DE  
         f1452 00000           f1461 0030D           f1462 00000  
  ?a_send_data 00037  ?a_scroll_text 00030           _ACC0 000E0  
         _ACC1 000E1           _ACC2 000E2           _ACC3 000E3  
         _ACC4 000E4           _ACC5 000E5           _ACC6 000E6  
         _ACC7 000E7  stack_internal 00001           _INT0 000B2  
         _INT1 000B3           _PCON 00087           _SCON 00098  
         _SBUF 00099           _TCON 00088           _TMOD 00089  
         _main 002DC           awmod 0008B      _send_data 00180  
     _PSW_BITS 000D0     ?a_send_cmd 00037          _delay 00112  
      ldc_byte 0030F          _vyvod 0019C      _PCON_BITS 00087  
    _SCON_BITS 00098      _TCON_BITS 00088        str_copy 00398  
  _scroll_text 001F4      _TMOD_BITS 00089  
